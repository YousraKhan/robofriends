{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","_ref","robots","map","thisRobot","i","Components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","OnSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this3","filteredrobots","filter","robot","toLowerCase","includes","length","Components_SearchBox","Components_Scroll","Components_CardList","Component","ReactDOM","render","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGCeSC,EAfF,SAACC,GAAS,IACZC,EAAqBD,EAArBC,KAAOC,EAAcF,EAAdE,MAAQC,EAAMH,EAANG,GACtB,OAEOC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,0CACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAK,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,cACtBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCATS,EAvBE,SAAAC,GAAgB,IAAbC,EAAaD,EAAbC,OAUhB,OACIT,EAAAC,EAAAC,cAAA,WAEQO,EAAOC,IAAI,SAACC,EAAUC,GAClB,OACIZ,EAAAC,EAAAC,cAACW,EAAD,CAAMC,IAAKF,EAAGb,GAAIY,EAAUZ,GAAIF,KAAMc,EAAUd,KAAMC,MAAOa,EAAUb,YCHhFiB,EAbG,SAAAP,GAClBA,EADoBQ,YACpB,IADgCC,EAChCT,EADgCS,aAE5B,OACAjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,SACAC,UAAU,gCACVe,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCECI,EAVA,SAACzB,GACZ,OAEII,EAAAC,EAAAC,cAAA,OAAKoB,MAAO,CAACC,UAAU,SAAWC,OAAO,kBAAoBC,OAAO,UAC/D7B,EAAM8B,WCwDJC,qBAnDX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAkBJI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CAAErB,YAAaoB,EAAME,OAAOC,SAlB1CX,EAAKY,MAAQ,CACT/B,OAAQ,GACRO,YAAa,IAJPY,mFAQM,IAAAa,EAAAV,KAChBW,MAAM,8CACDC,KAAK,SAAAC,GACF,OAAOA,EAASC,SAEnBF,KAAK,SAAAG,GACFL,EAAKJ,SAAS,CAAE5B,OAAQqC,uCAW3B,IAAAC,EAAAhB,KAECiB,EAAiBjB,KAAKS,MAAM/B,OAAOwC,OAAO,SAAAC,GAC5C,OAAOA,EAAMrD,KAAKsD,cAAcC,SAASL,EAAKP,MAAMxB,YAAYmC,iBAGpE,OAAiC,IAA7BpB,KAAKS,MAAM/B,OAAO4C,OACXrD,EAAAC,EAAAC,cAAA,qBAKHF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACoD,EAAD,CAAWrC,aAAcc,KAAKI,iBAC9BnC,EAAAC,EAAAC,cAACqD,EAAD,KACAvD,EAAAC,EAAAC,cAACsD,EAAD,CAAU/C,OAAQuC,aA3CpBS,cCClBC,IAASC,OAEJ3D,EAAAC,EAAAC,cAAC0D,EAAD,MAECC,SAASC,eAAe,SNmHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.1eec9bfd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//import React, {Component} from 'react';\r\nimport React from 'react';\r\n\r\n/*class Card extends Component{\r\n    render()\r\n    {\r\n        return(\r\n            <div>\r\n                <img alt ='robots' src='https://robohash.org/test' />\r\n                <div>\r\n                    <h2>Jane Doe</h2>\r\n                    <p>Jane.doe@gmail.com</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n} */\r\n\r\nconst Card = (props) =>{\r\n    const {name , email , id} = props;\r\n    return(\r\n\r\n           <div className= 'tc bg-light-green dib br3 pa3 ma2 grow'>\r\n                <img alt ='robots' src={`https://robohash.org/${id}?400*400`} />\r\n                <div>\r\n                    <h2>{name}</h2>\r\n                    <p>{email}</p>\r\n                </div>\r\n            </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    /* const CardComponent = robots.map((user,i) => {\r\n         return(\r\n \r\n             \r\n             <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}  />\r\n \r\n         );\r\n     }) */\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((thisRobot,i) => {\r\n                    return (\r\n                        <Card key={i} id={thisRobot.id} name={thisRobot.name} email={thisRobot.email} />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) =>\r\n{\r\n    return(\r\n    <div className='pa2'>\r\n    <input \r\n    className='pa3 ba b--green bg-light-blue' \r\n    type='search' \r\n    placeholder='search robots' \r\n    onChange={searchChange}\r\n    />\r\n    </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n\r\n        <div style={{overflowY:'scroll' , border:'5px solid black' , height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\n//import {robots} from './robots';\r\nimport Scroll from '../Components/Scroll';\r\nimport './App.css'\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => {\r\n                return response.json();\r\n            })\r\n            .then(users => {\r\n                this.setState({ robots: users })\r\n            })\r\n\r\n    }\r\n\r\n    OnSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n\r\n        //console.log(filteredrobots);\r\n    }\r\n\r\n    render() {\r\n\r\n        const filteredrobots = this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n\r\n        if (this.state.robots.length === 0) {\r\n            return <h1>Loading</h1>\r\n        }\r\n\r\n        else {\r\n            return (\r\n                <div className='tc'>\r\n                    <h1 className='f2'>RoboFriends</h1>\r\n                    <SearchBox searchChange={this.OnSearchChange} />\r\n                    <Scroll>\r\n                    <CardList robots={filteredrobots} />\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from './Card';\nimport * as serviceWorker from './serviceWorker';\n//import {robots} from './robots';\nimport 'tachyons';\n//import  CardList from './CardList';\nimport App from './Containers/App';\n\nReactDOM.render(\n        \n     <App/>\n        \n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}